// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
    UP
    DOWN
}

enum PortStatus {
    OPEN
    CLOSED
    FILTERED
}

enum SystemStatus {
    RUNNING
    STOPPED
}

enum UserType {
    PRIVILEGED
    USER // Assuming there might be regular users as well.
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?
}

model API_KEYS {
  id          Int @id @default(autoincrement())
  key         String 
  lifetime    Int  
}

model Host {
  id                Int          @id @default(autoincrement())
  hostname          String       @unique
  ip                String       @unique
  osId              Int          @unique
  status            Status?       // Changed to enum type
  os                OS           @relation(fields: [osId], references: [id])
  systemInfoId      Int?         @unique
  systemInfo        SystemInfo?  @relation(fields: [systemInfoId], references: [id])
  macAddress        String?      // New field
  gateway           String?
  dhcp              Boolean?
  createdAt         DateTime     @default(now())
  disks             Disk[]
  systemServices    SystemService[]
  networkServices   NetworkService[]
  incidents         Incident[]
  software          Software[]
  containers        Container[]
  userAccounts      UserAccount[]
}

model OS {
  id      Int    @id @default(autoincrement())
  name    String // Linux, Windows, Router, Unknown
  version String?
  host    Host?
}

model SystemInfo {
  id        Int    @id @default(autoincrement())
  cpuCores  Int
  cpuName   String
  memory    Int    // Assuming this is in MB or GB
  host      Host?
}

model Disk {
  id                  Int     @id @default(autoincrement())
  name                String
  mountPoint          String
  filesystem          String
  totalSpace          Int
  availableSpace      Int
  hostId              Int
  host                Host?  @relation(fields: [hostId], references: [id])
}

model SystemService {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  status      SystemStatus // Assuming Status is an enum with values like UP, DOWN
  hostId      Int
  host        Host?  @relation(fields: [hostId], references: [id])
}

model NetworkService {
  id          Int    @id @default(autoincrement())
  name        String
  port        Int
  description String?
  status      PortStatus // Port can be OPEN, CLOSED, or FILTERED
  hostId      Int
  host        Host?  @relation(fields: [hostId], references: [id])
}

model Incident {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  tags        String[]
  host        Host?        @relation(fields: [hostId], references: [id])
  hostId      Int
  createdAt   DateTime     @default(now())
}

model Software {
  id          Int      @id @default(autoincrement())
  name        String
  version     String?
  path        String?
  host        Host?    @relation(fields: [hostId], references: [id])
  hostId      Int
}

model Container {
  id          Int      @id @default(autoincrement())
  containerId String   @unique
  name        String
  type        String
  host        Host?    @relation(fields: [hostId], references: [id])
  hostId      Int
  volumes     Volume[] // One-to-many relationship with Volume
}

model Volume {
  id           Int      @id @default(autoincrement())
  path         String
  name         String
  size         Int      // Assuming this is in MB or GB
  permissions  String   
  containerId  Int
  container    Container @relation(fields: [containerId], references: [id])
}


model UserAccount {
  id        Int       @id @default(autoincrement())
  name      String
  password  String?
  userType  UserType?  // Changed to enum type
  isLocal   Boolean
  uid       String
  gid       String
  host      Host?    @relation(fields: [hostId], references: [id])
  hostId    Int
}